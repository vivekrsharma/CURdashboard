[general]
namespace = "CUR"

[athena]
database_name = 'cur'
table_prefix = "autocur"
create_database = "create database if not exists `cur` comment \"AutoDBR Athena Database\""
create_table = """
  create external table if not exists `**DBNAME**.**PREFIX**_**DATE**` (
    **COLUMNS**
  )
  STORED AS PARQUET
  LOCATION '**S3**' \
  """

[ri]
enableRIanalysis = false
enableRITotalUtilization = true # Set this to true to get a total RI percentage utilization value.
riPercentageThreshold = 5 # Ignore un-used RI's where percentage of under-use lower than this value
riTotalThreshold = 5 # Ignore un-used RI's where total number of RI's (per instance type) is below this.
cwNameTotal = "riTotalUtilization"
cwName = "riUnderUtilization"
cwDimension = "instance"
cwDimensionTotal = "total"
cwType = "Percent"
sql = """
  SELECT distinct
    COALESCE(
       regexp_extract(itemdescription,'per(?:\\sOn Demand)*\\s(.*?)(?:\\s\\(Amazon VPC\\))*,*\\s([a-z]\\d\\.\\d*\\w+)\\s', 1),
       regexp_extract(itemdescription,'^([a-z]\\d\\.\\d*\\w+)\\s(.*?)(?:\\s\\(Amazon VPC\\))*\\sSpot',2)
       ) AS platform,
   COALESCE(
      regexp_extract(itemdescription,'per(?:\\sOn Demand)*\\s(.*?)(?:\\s\\(Amazon VPC\\))*,*\\s([a-z]\\d\\.\\d*\\w+)\\s', 2),
      regexp_extract(itemdescription,'^([a-z]\\d\\.\\d*\\w+)\\s(.*?)(?:\\s\\(Amazon VPC\\))*\\sSpot',1)
      ) AS instance,
    substr(usagestartdate, 1, 13) AS date,
    availabilityzone AS az,
    count(*) AS hours
  FROM dbr.autodbr_**DATE**
  WHERE productname = 'Amazon Elastic Compute Cloud'
  AND operation like '%RunInstances%'
  AND usagetype like '%Usage%'
  AND reservedinstance = 'Y'
  AND split_part(usagetype, ':', 2) is not NULL
  AND length(availabilityzone) > 1
  AND length(usagestartdate) > 1
  AND try_cast(usagestartdate as timestamp) IS NOT NULL
  AND try_cast(usagestartdate as timestamp) > now() - interval '72' hour
  AND try_cast(usagestartdate as timestamp) < now()
  GROUP BY
    COALESCE(
       regexp_extract(itemdescription,'per(?:\\sOn Demand)*\\s(.*?)(?:\\s\\(Amazon VPC\\))*,*\\s([a-z]\\d\\.\\d*\\w+)\\s', 1),
       regexp_extract(itemdescription,'^([a-z]\\d\\.\\d*\\w+)\\s(.*?)(?:\\s\\(Amazon VPC\\))*\\sSpot',2)
       ),
   COALESCE(
      regexp_extract(itemdescription,'per(?:\\sOn Demand)*\\s(.*?)(?:\\s\\(Amazon VPC\\))*,*\\s([a-z]\\d\\.\\d*\\w+)\\s', 2),
      regexp_extract(itemdescription,'^([a-z]\\d\\.\\d*\\w+)\\s(.*?)(?:\\s\\(Amazon VPC\\))*\\sSpot',1)
      ),
    substr(usagestartdate, 1, 13),
    availabilityzone
"""
[ri.ignore] ## Ignore un-used RI's in this map/hash
"t2.micro" = 1
"m1.small" = 1 # This has to be ignored as RI usage in DBR file for this instance type is not accurate

[metricConfig]
[metricConfig.substring]
"hourly" = "13"
"daily" = "10"
"monthly" = "7"

[[metrics]]
## Count of Instance purchase types (RI, Spot, onDemand)"
enabled = false
hourly = true
daily = true
type = "dimension-per-row"
cwName = "InstancePurchaseType"
cwDimension = "type"
cwType = "Count"
sql = """
 SELECT
    coalesce(nullif("pricing/term", ''), substr(split_part("lineitem/usagetype", ':', 1), strpos("lineitem/usagetype", '-')+1)) as dimension,
    substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
    sum("lineitem/usageamount") as value
  FROM **DBNAME**.autocur_**DATE**
  WHERE length("lineitem/usagestartdate") > 1
  AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
  AND "product/productname" = 'Amazon Elastic Compute Cloud'
  AND "lineitem/operation" like 'RunInstances%'
  AND "lineitem/resourceid" like 'i-%'
  AND "lineitem/usagetype" like '%Usage%'
  GROUP BY
    coalesce(nullif("pricing/term", ''), substr(split_part("lineitem/usagetype", ':', 1), strpos("lineitem/usagetype", '-')+1)),
    substr("lineitem/usagestartdate",1,**INTERVAL**)
  ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC
"""

[[metrics]]
## Summary of Cummulative Cost
enabled = true
hourly = true
daily = true
monthly = true
type = "dimension-per-row"
cwName = "CummulativeCost"
cwDimension = "cummulativecost"
cwType = "None"
sql = """
    SELECT
      'total' as dimension,
      substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
      sum("lineitem/blendedcost") as value
    FROM **DBNAME**.autocur_**DATE**
    WHERE length("lineitem/usagestartdate") > 1
    AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
    GROUP BY
      substr("lineitem/usagestartdate",1,**INTERVAL**)
    ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC\
"""

[[metrics]]
## Summary of Overall Cost per hour
enabled = true
hourly = true
daily = true
monthly = true
type = "dimension-per-row"
cwName = "TotalCost"
cwDimension = "cost"
cwType = "None"
sql = """
    SELECT
      'total' as dimension,
      substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
      sum("lineitem/blendedcost") as value
    FROM **DBNAME**.autocur_**DATE**
    WHERE length("lineitem/usagestartdate") > 1
    AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
    GROUP BY
      substr("lineitem/usagestartdate",1,**INTERVAL**)
    ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC\
"""

[[metrics]]
## Summary of Cost per service per hour
enabled = true
hourly = true
daily = true
monthly = true
type = "dimension-per-row"
cwName = "ServiceCost"
cwDimension = "servicecost"
cwType = "None"
sql = """
    SELECT
      "product/productname" as dimension,
      substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
      sum("lineitem/blendedcost") as value
    FROM **DBNAME**.autocur_**DATE**
    WHERE length("lineitem/usagestartdate") > 1
    AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
    GROUP BY
      "product/productname",
      substr("lineitem/usagestartdate",1,**INTERVAL**)
    HAVING sum("lineitem/blendedcost") > 0.1
    ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC \
"""

[[metrics]]
## Cost per account
enabled = true
hourly = true
daily = true
monthly = true
type = "dimension-per-row"
cwName = "AccountCost"
cwDimension = "accountcost"
cwType = "None"
sql = """
    SELECT
      "lineitem/usageaccountid" as dimension,
      substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
      sum("lineitem/blendedcost") as value
    FROM **DBNAME**.autocur_**DATE**
    WHERE length("lineitem/usagestartdate") > 1
    AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
    GROUP BY
      "lineitem/usageaccountid",
      substr("lineitem/usagestartdate",1,**INTERVAL**)
    ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC \
"""

[[metrics]]
## Count of Instance Types
enabled = true
hourly = true
daily = true
monthly = true
type = "dimension-per-row"
cwName = "InstanceType"
cwDimension = "instancecount"
cwType = "Count"
sql = """
  SELECT
   split_part("lineitem/usagetype", ':', 2) as dimension,
   substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
   sum("lineitem/usageamount") as value
  FROM **DBNAME**.autocur_**DATE**
  WHERE length("lineitem/usagestartdate") > 1
  AND from_iso8601_timestamp("lineitem/usagestartdate") < now()
  AND "product/productname" = 'Amazon Elastic Compute Cloud'
  AND "lineitem/operation" like 'RunInstances%'
  AND "lineitem/resourceid" like 'i-%'
  AND "lineitem/usagetype" like '%Usage%'
  GROUP BY
    split_part("lineitem/usagetype", ':', 2),
    substr("lineitem/usagestartdate",1,**INTERVAL**)
  HAVING sum("lineitem/usageamount") > 0.1
  ORDER BY substr("lineitem/usagestartdate",1,**INTERVAL**) DESC \
"""

[[metrics]]
## Cost split by team
enabled = true
hourly = false
daily = true
monthly = true
type = "dimension-per-row"
cwName = "TeamCost"
cwDimension = "teamcost"
cwType = "None"
sql = """

SELECT coalesce(d.team_name, 'Unknown') as dimension,
  substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
  SUM("lineitem/blendedcost") AS value
FROM **DBNAME**.autocur_**DATE**
  LEFT JOIN
   **DBNAME**.team_mapping d
ON
  (
    CASE
    WHEN "product/productname" = 'Amazon Elastic MapReduce' OR
    "resourcetags/aws_elasticmapreduce_instance_group_role" IN ('MASTER','TASK', 'CORE') OR
    ( "product/servicename" = 'AWS Data Transfer' AND  "resourcetags/user_s3_bucket_name" ='uber-streamio')
    THEN 'Maps'

    WHEN "resourcetags/user_uber_service" IN ('uSearch', 'Money')
    THEN "resourcetags/user_uber_service"

    WHEN  "lineitem/usageaccountid" != '866855916450'
    THEN  "lineitem/usageaccountid"

    WHEN "resourcetags/user_uber_service" != ''
    THEN "resourcetags/user_uber_service"

    WHEN "product/productname" = 'Amazon Simple Storage Service' AND
    "product/servicename" = 'Amazon Simple Storage Service'
    THEN "resourcetags/user_s3_bucket_name"

    WHEN ( regexp_like("lineitem/usagetype",'EBS:Vol') = true OR
    regexp_like("lineitem/usagetype",'EBS:Snap') = true) AND
    "product/productname" = 'Amazon Elastic Compute Cloud' and
    "resourcetags/aws_elasticmapreduce_instance_group_role" = ''
    THEN 'EBS'

    WHEN "product/productname" ='AWS Premium Support'
    THEN 'AWS Premium Support'

    WHEN "product/productname" = 'AWS Direct Connect' or "product/servicename"= 'AWS Direct Connect'
    THEN 'AWS Direct Connect'

    WHEN "product/productname" = 'Amazon Simple Workflow Service'
    THEN 'Amazon Simple Workflow Service'

    WHEN "product/productname" = 'Amazon CloudFront'
    THEN 'Amazon CloudFront'

    WHEN "product/servicename" = 'AWS Data Transfer' and "resourcetags/user_s3_bucket_name" != 'uber-streamio'
    THEN 'AWS Data Transfer'

    WHEN "product/productname" = 'Amazon Elastic Compute Cloud' and "lineitem/lineitemtype"='RIFee'
    THEN 'RIFee'

    WHEN "product/productname" = 'Amazon Macie'
    THEN 'Macie'

    ELSE
    "lineitem/usageaccountid"
    END = d.value)
WHERE
  "lineitem/blendedcost"> 0
GROUP BY
  coalesce(d.team_name, 'Unknown'),
  substr("lineitem/usagestartdate",1,**INTERVAL**)
ORDER BY
  substr("lineitem/usagestartdate",1,**INTERVAL**) DESC,
  value DESC \
"""

[[metrics]]
## Cummulative cost split by team
enabled = true
hourly = false
daily = false
monthly = true
type = "dimension-per-row"
cwName = "CummulativeTeamCost"
cwDimension = "cummulativeteamcost"
cwType = "None"
sql = """

SELECT coalesce(d.team_name, 'Unknown') as dimension,
  substr("lineitem/usagestartdate",1,**INTERVAL**) as date,
  SUM("lineitem/blendedcost") AS value
FROM **DBNAME**.autocur_**DATE**
  LEFT JOIN
   **DBNAME**.team_mapping d
ON
  (
    CASE
    WHEN "product/productname" = 'Amazon Elastic MapReduce' OR
    "resourcetags/aws_elasticmapreduce_instance_group_role" IN ('MASTER','TASK', 'CORE') OR
    ( "product/servicename" = 'AWS Data Transfer' AND  "resourcetags/user_s3_bucket_name" ='uber-streamio')
    THEN 'Maps'

    WHEN "resourcetags/user_uber_service" IN ('uSearch', 'Money')
    THEN "resourcetags/user_uber_service"

    WHEN  "lineitem/usageaccountid" != '866855916450'
    THEN  "lineitem/usageaccountid"

    WHEN "resourcetags/user_uber_service" != ''
    THEN "resourcetags/user_uber_service"

    WHEN "product/productname" = 'Amazon Simple Storage Service' AND
    "product/servicename" = 'Amazon Simple Storage Service'
    THEN "resourcetags/user_s3_bucket_name"

    WHEN ( regexp_like("lineitem/usagetype",'EBS:Vol') = true OR
    regexp_like("lineitem/usagetype",'EBS:Snap') = true) AND
    "product/productname" = 'Amazon Elastic Compute Cloud' and
    "resourcetags/aws_elasticmapreduce_instance_group_role" = ''
    THEN 'EBS'

    WHEN "product/productname" ='AWS Premium Support'
    THEN 'AWS Premium Support'

    WHEN "product/productname" = 'AWS Direct Connect' or "product/servicename"= 'AWS Direct Connect'
    THEN 'AWS Direct Connect'

    WHEN "product/productname" = 'Amazon Simple Workflow Service'
    THEN 'Amazon Simple Workflow Service'

    WHEN "product/productname" = 'Amazon CloudFront'
    THEN 'Amazon CloudFront'

    WHEN "product/servicename" = 'AWS Data Transfer' and "resourcetags/user_s3_bucket_name" != 'uber-streamio'
    THEN 'AWS Data Transfer'

    WHEN "product/productname" = 'Amazon Elastic Compute Cloud' and "lineitem/lineitemtype"='RIFee'
    THEN 'RIFee'

    WHEN "product/productname" = 'Amazon Macie'
    THEN 'Macie'

    ELSE
    "lineitem/usageaccountid"
    END = d.value)
WHERE
  "lineitem/blendedcost"> 0
GROUP BY
  coalesce(d.team_name, 'Unknown'),
  substr("lineitem/usagestartdate",1,**INTERVAL**)
ORDER BY
  substr("lineitem/usagestartdate",1,**INTERVAL**) DESC,
  value DESC \
"""
